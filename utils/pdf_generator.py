from reportlab.lib.pagesizes import letter, A4
from reportlab.pdfgen import canvas
from reportlab.lib.colors import HexColor, black, red, orange, green
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.units import inch
import io
from datetime import datetime

class PDFGenerator:
    def __init__(self):
        self.page_width, self.page_height = letter
        
    def generate_password_report(self, password_data):
        """Generate a comprehensive password report PDF"""
        buffer = io.BytesIO()
        
        # Create PDF document
        doc = SimpleDocTemplate(buffer, pagesize=letter, 
                              rightMargin=72, leftMargin=72,
                              topMargin=72, bottomMargin=18)
        
        # Container for PDF elements
        story = []
        styles = getSampleStyleSheet()
        
        # Title
        title_style = styles['Heading1']
        title_style.alignment = 1  # Center alignment
        title = Paragraph("üîê Secure Password Report", title_style)
        story.append(title)
        story.append(Spacer(1, 12))
        
        # Subtitle with generation time
        subtitle_style = styles['Heading2']
        subtitle_style.alignment = 1
        subtitle = Paragraph(f"Generated on {password_data['generated_at']}", subtitle_style)
        story.append(subtitle)
        story.append(Spacer(1, 20))
        
        # Password Information Table
        password_info = [
            ['Platform:', password_data.get('platform', 'Custom')],
            ['Password Length:', f"{len(password_data['password'])} characters"],
            ['Password Strength:', f"{password_data['strength']['level']} ({password_data['strength']['score']}/100)"],
            ['Entropy:', f"{password_data.get('entropy', 0):.2f} bits"],
        ]
        
        # Add rules applied
        rules_text = ', '.join(password_data.get('rules', []))
        password_info.append(['Rules Applied:', rules_text])
        
        # Create table
        info_table = Table(password_info, colWidths=[2*inch, 4*inch])
        info_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (0, -1), HexColor('#f0f0f0')),
            ('TEXTCOLOR', (0, 0), (-1, -1), black),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
            ('FONTNAME', (1, 0), (1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('GRID', (0, 0), (-1, -1), 1, black),
            ('VALIGN', (0, 0), (-1, -1), 'TOP'),
        ]))
        
        story.append(info_table)
        story.append(Spacer(1, 20))
        
        # Password Display (masked option)
        password_style = styles['Normal']
        password_style.alignment = 1
        password_display = Paragraph(f"<b>Generated Password:</b><br/><font name='Courier' size='12'>{password_data['password']}</font>", password_style)
        story.append(password_display)
        story.append(Spacer(1, 20))
        
        # Strength Analysis
        strength_title = Paragraph("<b>Password Strength Analysis</b>", styles['Heading3'])
        story.append(strength_title)
        story.append(Spacer(1, 12))
        
        # Strength feedback
        feedback = password_data['strength'].get('feedback', [])
        if feedback:
            feedback_text = "Security Recommendations:<br/>" + "<br/>".join([f"‚Ä¢ {item}" for item in feedback])
        else:
            feedback_text = "‚úÖ Excellent! Your password meets all security requirements."
        
        feedback_para = Paragraph(feedback_text, styles['Normal'])
        story.append(feedback_para)
        story.append(Spacer(1, 20))
        
        # Security Tips
        security_tips = [
            "üîí Never share your password with anyone",
            "üîÑ Change your password regularly (every 3-6 months)",
            "üì± Enable two-factor authentication when available",
            "üíæ Use a password manager to store passwords securely",
            "üö´ Don't use the same password across multiple accounts",
            "üîç Regularly check if your accounts have been compromised"
        ]
        
        tips_title = Paragraph("<b>Security Best Practices</b>", styles['Heading3'])
        story.append(tips_title)
        story.append(Spacer(1, 12))
        
        tips_text = "<br/>".join(security_tips)
        tips_para = Paragraph(tips_text, styles['Normal'])
        story.append(tips_para)
        story.append(Spacer(1, 20))
        
        # Footer
        footer_style = styles['Normal']
        footer_style.alignment = 1
        footer_style.fontSize = 8
        footer = Paragraph("Generated by Social Media Password Generator | Keep this document secure", footer_style)
        story.append(Spacer(1, 30))
        story.append(footer)
        
        # Build PDF
        doc.build(story)
        buffer.seek(0)
        
        return buffer
